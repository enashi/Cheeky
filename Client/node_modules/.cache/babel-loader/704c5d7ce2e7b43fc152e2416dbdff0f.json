{"ast":null,"code":"import { DELETE_COMMENT, DELETE_POST, EDIT_COMMENT, GET_POSTS, LIKE_POST, UNLIKE_POST, UPDATE_POST } from \"../actions/post.actions\";\nconst initialState = {}; //quand on démarre un store, on commence toujours avec un  initialState = vide\n\nexport default function postReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return action.payload;\n    //on lui passe toute la data vu qu'on veut envoyer toute les données\n\n    case LIKE_POST:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          //on va identifier le message en question\n          return { ...post,\n            //on retourne le post \n            likers: [action.payload.userId, ...post.likers] // on rajoute le like dans le tableau des likes -> store\n\n          };\n        }\n\n        return post;\n      });\n\n    case UNLIKE_POST:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          return { ...post,\n            likers: post.likers.filter(id => id !== action.payload.userId) //si l'id n'est pas égale userId alors on retire du tableau\n\n          };\n        }\n\n        return post; //pour retourner ce qu'on a changé\n      });\n\n    case UPDATE_POST:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          return { ...post,\n            message: action.payload.message\n          };\n        }\n\n        return post;\n      });\n\n    case DELETE_POST:\n      return state.filter(post => post._id !== action.payload.postId);\n\n    case EDIT_COMMENT:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          return { ...post,\n            comments: post.comments.map(comment => {\n              if (comment._id === action.payload.commentId) {\n                return { ...comment,\n                  text: action.payload.text\n                };\n              } else {\n                return comment;\n              }\n            })\n          };\n        } else return post;\n      });\n\n    case DELETE_COMMENT:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          return { ...post,\n            comments: post.comments.filter(comment => comment._id !== action.payload.commentId)\n          };\n        } else {\n          return post;\n        }\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6/LU3IN017/TME/dossier sans titre/cheeky/Client/src/component/Utilitaire/reducers/post.reducer.js"],"names":["DELETE_COMMENT","DELETE_POST","EDIT_COMMENT","GET_POSTS","LIKE_POST","UNLIKE_POST","UPDATE_POST","initialState","postReducer","state","action","type","payload","map","post","_id","postId","likers","userId","filter","id","message","comments","comment","commentId","text"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,EAAsCC,YAAtC,EAAoDC,SAApD,EAA+DC,SAA/D,EAA0EC,WAA1E,EAAuFC,WAAvF,QAA0G,yBAA1G;AAEA,MAAMC,YAAY,GAAG,EAArB,C,CAAyB;;AAEzB,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGF,YAA7B,EAA2CG,MAA3C,EAAkD;AAC7D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,SAAL;AACI,aAAOO,MAAM,CAACE,OAAd;AAAuB;;AAE3B,SAAKR,SAAL;AACI,aAAOK,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAU;AACvB,YAAIA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeI,MAAhC,EAAwC;AAAE;AACtC,iBAAO,EACH,GAAGF,IADA;AACM;AACTG,YAAAA,MAAM,EAAE,CAACP,MAAM,CAACE,OAAP,CAAeM,MAAhB,EAAwB,GAAGJ,IAAI,CAACG,MAAhC,CAFL,CAE6C;;AAF7C,WAAP;AAIH;;AACD,eAAOH,IAAP;AACH,OARM,CAAP;;AASJ,SAAKT,WAAL;AACI,aAAOI,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAU;AACvB,YAAIA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeI,MAAhC,EAAwC;AACpC,iBAAO,EACH,GAAGF,IADA;AAEHG,YAAAA,MAAM,EAAEH,IAAI,CAACG,MAAL,CAAYE,MAAZ,CAAoBC,EAAD,IAAQA,EAAE,KAAKV,MAAM,CAACE,OAAP,CAAeM,MAAjD,CAFL,CAE8D;;AAF9D,WAAP;AAIH;;AACD,eAAOJ,IAAP,CAPuB,CAOV;AAChB,OARM,CAAP;;AAUJ,SAAKR,WAAL;AACI,aAAOG,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAU;AACvB,YAAIA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeI,MAAhC,EAAuC;AACnC,iBAAO,EACH,GAAGF,IADA;AAEHO,YAAAA,OAAO,EAAEX,MAAM,CAACE,OAAP,CAAeS;AAFrB,WAAP;AAIH;;AAAC,eAAOP,IAAP;AACL,OAPM,CAAP;;AASJ,SAAKb,WAAL;AACI,aAAOQ,KAAK,CAACU,MAAN,CAAcL,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeI,MAAnD,CAAP;;AAEJ,SAAKd,YAAL;AACI,aAAOO,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAU;AACvB,YAAGA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeI,MAA/B,EAAsC;AAClC,iBAAO,EACH,GAAGF,IADA;AAEHQ,YAAAA,QAAQ,EAAER,IAAI,CAACQ,QAAL,CAAcT,GAAd,CAAmBU,OAAD,IAAa;AACrC,kBAAIA,OAAO,CAACR,GAAR,KAAgBL,MAAM,CAACE,OAAP,CAAeY,SAAnC,EAA6C;AACzC,uBAAO,EACH,GAAGD,OADA;AAEHE,kBAAAA,IAAI,EAAEf,MAAM,CAACE,OAAP,CAAea;AAFlB,iBAAP;AAIH,eALD,MAKK;AACD,uBAAOF,OAAP;AACH;AACJ,aATS;AAFP,WAAP;AAaH,SAdD,MAcO,OAAOT,IAAP;AACV,OAhBM,CAAP;;AAkBJ,SAAKd,cAAL;AACI,aAAOS,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAU;AACvB,YAAGA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeI,MAA/B,EAAsC;AAClC,iBAAO,EACH,GAAGF,IADA;AAEHQ,YAAAA,QAAQ,EAAER,IAAI,CAACQ,QAAL,CAAcH,MAAd,CAAsBI,OAAD,IAAaA,OAAO,CAACR,GAAR,KAAgBL,MAAM,CAACE,OAAP,CAAeY,SAAjE;AAFP,WAAP;AAIH,SALD,MAKK;AACD,iBAAOV,IAAP;AACH;AACJ,OATM,CAAP;;AAUJ;AACI,aAAOL,KAAP;AArER;AAuEH","sourcesContent":["import { DELETE_COMMENT, DELETE_POST, EDIT_COMMENT, GET_POSTS, LIKE_POST, UNLIKE_POST, UPDATE_POST } from \"../actions/post.actions\";\r\n\r\nconst initialState = {}; //quand on démarre un store, on commence toujours avec un  initialState = vide\r\n\r\nexport default function postReducer(state = initialState, action){\r\n    switch(action.type){\r\n        case GET_POSTS:\r\n            return action.payload; //on lui passe toute la data vu qu'on veut envoyer toute les données\r\n        \r\n        case LIKE_POST:\r\n            return state.map((post) => {\r\n                if (post._id === action.payload.postId) { //on va identifier le message en question\r\n                    return {\r\n                        ...post, //on retourne le post \r\n                        likers: [action.payload.userId, ...post.likers] // on rajoute le like dans le tableau des likes -> store\r\n                    };\r\n                }\r\n                return post;\r\n            })\r\n        case UNLIKE_POST:\r\n            return state.map((post) => {\r\n                if (post._id === action.payload.postId) {\r\n                    return {\r\n                        ...post,\r\n                        likers: post.likers.filter((id) => id !== action.payload.userId) //si l'id n'est pas égale userId alors on retire du tableau\r\n                    }\r\n                }\r\n                return post; //pour retourner ce qu'on a changé\r\n            })\r\n        \r\n        case UPDATE_POST:\r\n            return state.map((post) => {\r\n                if (post._id === action.payload.postId){\r\n                    return {\r\n                        ...post,\r\n                        message: action.payload.message\r\n                    };\r\n                } return post; \r\n            })\r\n\r\n        case DELETE_POST:\r\n            return state.filter((post) => post._id !== action.payload.postId);\r\n\r\n        case EDIT_COMMENT:\r\n            return state.map((post) => {\r\n                if(post._id === action.payload.postId){\r\n                    return {\r\n                        ...post,\r\n                        comments: post.comments.map((comment) => {\r\n                            if (comment._id === action.payload.commentId){\r\n                                return {\r\n                                    ...comment,\r\n                                    text: action.payload.text\r\n                                }\r\n                            }else{\r\n                                return comment;\r\n                            }\r\n                        })\r\n                    }\r\n                } else return post;\r\n            })\r\n            \r\n        case DELETE_COMMENT:\r\n            return state.map((post) => {\r\n                if(post._id === action.payload.postId){\r\n                    return {\r\n                        ...post,\r\n                        comments: post.comments.filter((comment) => comment._id !== action.payload.commentId)\r\n                    }\r\n                }else{\r\n                    return post;\r\n                }\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}