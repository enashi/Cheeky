{"ast":null,"code":"import { FOLLOW_USER, GET_USER, UNFOLLOW_USER, UPDATE_BIO, UPLOAD_PICTURE } from \"../actions/user.actions\";\nconst initialState = {}; //Quand on va demander de la data, on va voir en premier lieu la db, puis on va la sotcker -> plus besoin à la db\n\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_USER:\n      return action.payload;\n    //Toute la data de res.data qui à été envoyé avec action.payload on incrémente notre initialState\n\n    case UPLOAD_PICTURE:\n      return { ...state,\n        //pour eviter d'écraser les données\n        picture: action.payload\n      };\n\n    case UPDATE_BIO:\n      return { ...state,\n        bio: action.payload\n      };\n\n    case FOLLOW_USER:\n      return { ...state,\n        following: [action.payload.idToFollow, ...state.following] //on recupère la suite de notre tableau pour pas écraser ce qu'on avait avant\n\n      };\n\n    case UNFOLLOW_USER:\n      return { ...state,\n        following: state.following.filter(id => id !== action.payload.idToUnfollow)\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Utilitaire/reducers/user.reducer.js"],"names":["FOLLOW_USER","GET_USER","UNFOLLOW_USER","UPDATE_BIO","UPLOAD_PICTURE","initialState","userReducer","state","action","type","payload","picture","bio","following","idToFollow","filter","id","idToUnfollow"],"mappings":"AAAA,SACEA,WADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,UAJF,EAKEC,cALF,QAMQ,yBANR;AAQC,MAAMC,YAAY,GAAG,EAArB,C,CAAyB;;AAEzB,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGF,YAA7B,EAA2CG,MAA3C,EAAmD;AACjE,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKR,QAAL;AACC,aAAOO,MAAM,CAACE,OAAd;AAAuB;;AACxB,SAAKN,cAAL;AACC,aAAO,EACN,GAAGG,KADG;AACI;AACVI,QAAAA,OAAO,EAAEH,MAAM,CAACE;AAFV,OAAP;;AAID,SAAKP,UAAL;AACC,aAAO,EACN,GAAGI,KADG;AAENK,QAAAA,GAAG,EAAEJ,MAAM,CAACE;AAFN,OAAP;;AAID,SAAKV,WAAL;AACC,aAAO,EACN,GAAGO,KADG;AAENM,QAAAA,SAAS,EAAE,CAACL,MAAM,CAACE,OAAP,CAAeI,UAAhB,EAA4B,GAAGP,KAAK,CAACM,SAArC,CAFL,CAEsD;;AAFtD,OAAP;;AAID,SAAKX,aAAL;AACC,aAAO,EACN,GAAGK,KADG;AAENM,QAAAA,SAAS,EAAEN,KAAK,CAACM,SAAN,CAAgBE,MAAhB,CAAwBC,EAAD,IAAQA,EAAE,KAAKR,MAAM,CAACE,OAAP,CAAeO,YAArD;AAFL,OAAP;;AAID;AACC,aAAOV,KAAP;AAxBF;AA0BA","sourcesContent":["import {\r\n\t\tFOLLOW_USER,\r\n\t\tGET_USER,\r\n\t\tUNFOLLOW_USER,\r\n\t\tUPDATE_BIO,\r\n\t\tUPLOAD_PICTURE,\r\n\t} from \"../actions/user.actions\";\r\n\t\r\n\tconst initialState = {}; //Quand on va demander de la data, on va voir en premier lieu la db, puis on va la sotcker -> plus besoin à la db\r\n\t\r\n\texport default function userReducer(state = initialState, action) {\r\n\t\tswitch (action.type) {\r\n\t\t\tcase GET_USER:\r\n\t\t\t\treturn action.payload; //Toute la data de res.data qui à été envoyé avec action.payload on incrémente notre initialState\r\n\t\t\tcase UPLOAD_PICTURE:\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state, //pour eviter d'écraser les données\r\n\t\t\t\t\tpicture: action.payload,\r\n\t\t\t\t};\r\n\t\t\tcase UPDATE_BIO:\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tbio: action.payload,\r\n\t\t\t\t};\r\n\t\t\tcase FOLLOW_USER:\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tfollowing: [action.payload.idToFollow, ...state.following], //on recupère la suite de notre tableau pour pas écraser ce qu'on avait avant\r\n\t\t\t\t};\r\n\t\t\tcase UNFOLLOW_USER:\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tfollowing: state.following.filter((id) => id !== action.payload.idToUnfollow),\r\n\t\t\t\t};\r\n\t\t\tdefault:\r\n\t\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n\t"]},"metadata":{},"sourceType":"module"}