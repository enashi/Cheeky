{"ast":null,"code":"var _jsxFileName = \"/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Page/Post/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updatePost } from '../../Utilitaire/actions/post.actions';\nimport Follow from '../Profil/Follow';\nimport { dateParser, isEmpty } from '../../Utilitaire/Util';\nimport LikeButton from './LikeButton';\nimport DeleteCard from './DeleteCard';\nimport CardComment from './CardComment';\nimport { NavLink } from 'react-router-dom'; // récupère toute les informations du posts qui est décomposé (id, les commentaires ...)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Card = ({\n  post\n}) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true); //quand on a pas de data on fait un loading\n\n  const [isUpdated, setIsUpdated] = useState(false); //pour modifier le  post\n\n  const [textUpdate, setTextUpdate] = useState(null);\n  const [showComments, setShowComments] = useState(false); //pour montrer les commentaires, de bases on les voit pas\n\n  const usersData = useSelector(state => state.usersReducer); //toute la base de données de nos utilisateurs\n\n  const userData = useSelector(state => state.userReducer); //data de notre utilisateur\n\n  const dispatch = useDispatch(); //permet d'envoyer l'action\n\n  const updateItem = () => {\n    if (textUpdate) {\n      //si jamais si texte contient quelque chose alors on peut modifier\n      dispatch(updatePost(post._id, textUpdate));\n    }\n\n    setIsUpdated(false);\n  }; //si userData n'est pas vide alors on a plus de chargement\n\n\n  useEffect(() => {\n    !isEmpty(usersData[0]) && setIsLoading(false);\n  }, [usersData]); //c'est un callback, c'est la condition de relande, dès qu'il a de la usersData alors il relance la fonction\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"card-container\",\n    children: isLoading ?\n    /*#__PURE__*/\n\n    /*On regarde si la data est vide, si oui on fait une attente (spin) sinon on affiche le touite */\n    _jsxDEV(\"i\", {\n      className: \"fas fa-spinner fa-spin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-left\",\n        children: /*#__PURE__*/_jsxDEV(NavLink, {\n          exact: true,\n          to: '/visitprofil/' + post.posterId,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: !isEmpty(usersData[0]) &&\n            /*Si jamais on réclame une photo ou une data qui n'a pas encore été cherché alors il renvoie une erreur */\n            usersData.map(user => {\n              /* On se map nos utilisateurs pour trouver l'image de notre utilisateur*/\n              if (user._id === post.posterId)\n                /* on fait ca car si l'utilisateur change d'image alors on actualise aussi, sinon on afiche que son ancienne image*/\n                return user.picture;else return null;\n            }).join(\"\")\n            /* Pour éviter de mettre des virgules entre chaque element, on remplace par une chaine vide */\n            // alt=\"poster-pic\"\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pseudo\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: !isEmpty(usersData[0]) &&\n              /*On cherche de facon dynamique le pseudo de l'utilisateur, On fait la même chose qu'au dessus */\n              usersData.map(user => {\n                if (user._id === post.posterId) return user.pseudo;else return null;\n              }).join(\"\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 9\n            }, this), post.posterId !== userData._id &&\n            /*#__PURE__*/\n\n            /* évite de ce follow lui même */\n            _jsxDEV(Follow, {\n              idToFollow: post.posterId,\n              type: 'card'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 8\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", dateParser(post.createdAt)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }, this), isUpdated === false && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", post.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 31\n        }, this), isUpdated && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"update-post\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            defaultValue: post.message,\n            onChange: e => setTextUpdate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              onClick: updateItem,\n              children: \"Valider modification\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 8\n        }, this), post.picture && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: post.picture,\n          alt: \"card-pic\",\n          className: \"card-pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 8\n        }, this), post.video &&\n        /*#__PURE__*/\n\n        /* pour mettre la vidéo à une certaine taille dans le post, ce sont les paramètres pour afficher des vidéos youtube */\n        _jsxDEV(\"iframe\", {\n          width: \"500\",\n          height: \"300\",\n          src: post.video,\n          frameBorder: \"0\",\n          allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n          allowFullScreen: true,\n          title: post._id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 8\n        }, this), userData._id === post.posterId &&\n        /*#__PURE__*/\n\n        /* donne la posiblité d'édit notre post uniquement si c'est le notre */\n        _jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setIsUpdated(!isUpdated)\n            /* Permet de retirer l'édition quand on clique sur le bouton */\n            ,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"./img/icons/edit.svg\",\n              alt: \"edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DeleteCard, {\n            id: post._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-footer\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-icon\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              onClick: () => setShowComments(!showComments),\n              src: \"./img/icons/message1.svg\",\n              alt: \"comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" \", post.comments.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(LikeButton, {\n            post: post\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 8\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }, this), showComments && /*#__PURE__*/_jsxDEV(CardComment, {\n          post: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true)\n  }, post._id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Card, \"BqpVuA4YGvVg2VfIRv2lKZeLwHQ=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Page/Post/Card.js"],"names":["React","useEffect","useState","useSelector","useDispatch","updatePost","Follow","dateParser","isEmpty","LikeButton","DeleteCard","CardComment","NavLink","Card","post","isLoading","setIsLoading","isUpdated","setIsUpdated","textUpdate","setTextUpdate","showComments","setShowComments","usersData","state","usersReducer","userData","userReducer","dispatch","updateItem","_id","posterId","map","user","picture","join","pseudo","createdAt","message","e","target","value","video","comments","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updatePost } from '../../Utilitaire/actions/post.actions';\r\nimport Follow from '../Profil/Follow';\r\nimport { dateParser, isEmpty } from '../../Utilitaire/Util';\r\nimport LikeButton from './LikeButton';\r\nimport DeleteCard from './DeleteCard';\r\nimport CardComment from './CardComment';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// récupère toute les informations du posts qui est décomposé (id, les commentaires ...)\r\nconst Card = ({ post }) => {\r\n\tconst [isLoading, setIsLoading] = useState(true); //quand on a pas de data on fait un loading\r\n\tconst [isUpdated, setIsUpdated] = useState(false); //pour modifier le  post\r\n\tconst [textUpdate, setTextUpdate] = useState(null);\r\n\tconst [showComments, setShowComments] = useState(false); //pour montrer les commentaires, de bases on les voit pas\r\n\tconst usersData = useSelector((state) => state.usersReducer); //toute la base de données de nos utilisateurs\r\n\tconst userData = useSelector((state) => state.userReducer); //data de notre utilisateur\r\n\tconst dispatch = useDispatch(); //permet d'envoyer l'action\r\n\r\n\tconst updateItem = () => {\r\n\t\tif (textUpdate) { //si jamais si texte contient quelque chose alors on peut modifier\r\n\t\t\tdispatch(updatePost(post._id, textUpdate))\r\n\t\t}\r\n\t\tsetIsUpdated(false);\r\n\t}\r\n\t//si userData n'est pas vide alors on a plus de chargement\r\n\tuseEffect(() => {\r\n\t\t!isEmpty(usersData[0]) && setIsLoading(false);\r\n\t}, [usersData]) //c'est un callback, c'est la condition de relande, dès qu'il a de la usersData alors il relance la fonction\r\n\r\n    return (\r\n\t\t<li className=\"card-container\" key={post._id}>\t\r\n\t\t\t{isLoading ? ( /*On regarde si la data est vide, si oui on fait une attente (spin) sinon on affiche le touite */\r\n\t\t\t\t<i className=\"fas fa-spinner fa-spin\"></i>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className=\"card-left\">\r\n                    \t<NavLink exact to={'/visitprofil/'+ post.posterId}>\r\n\t\t\t\t\t\t<img src={\r\n\t\t\t\t\t\t\t!isEmpty(usersData[0]) && /*Si jamais on réclame une photo ou une data qui n'a pas encore été cherché alors il renvoie une erreur */\r\n\t\t\t\t\t\t\t\tusersData.map((user) => { /* On se map nos utilisateurs pour trouver l'image de notre utilisateur*/\r\n\t\t\t\t\t\t\t\t\tif (user._id === post.posterId)  /* on fait ca car si l'utilisateur change d'image alors on actualise aussi, sinon on afiche que son ancienne image*/\r\n\t\t\t\t\t\t\t\t\t\treturn user.picture;\r\n\t\t\t\t\t\t\t\t\telse return null;\r\n\t\t\t\t\t\t\t\t}).join(\"\") /* Pour éviter de mettre des virgules entre chaque element, on remplace par une chaine vide */\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// alt=\"poster-pic\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"card-right\">\r\n\t\t\t\t\t\t<div className=\"card-header\">\r\n\t\t\t\t\t\t\t<div className=\"pseudo\">\r\n\t\t\t\t\t\t\t\t<h3>\r\n\t\t\t\t\t\t\t\t\t{!isEmpty(usersData[0]) && /*On cherche de facon dynamique le pseudo de l'utilisateur, On fait la même chose qu'au dessus */\r\n\t\t\t\t\t\t\t\t\t\tusersData.map((user) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif (user._id === post.posterId)\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn user.pseudo;\r\n\t\t\t\t\t\t\t\t\t\t\telse return null;\r\n\t\t\t\t\t\t\t\t\t\t}).join(\"\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t\t\t{post.posterId !== userData._id && ( /* évite de ce follow lui même */\r\n\t\t\t\t\t\t\t\t\t<Follow idToFollow={post.posterId} type={'card'} />\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div> {/* on affiche la date du post */}\r\n\t\t\t\t\t\t\t<span> {dateParser(post.createdAt)}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{isUpdated === false && <p> {post.message}</p>}\r\n\t\t\t\t\t\t{isUpdated && (\r\n\t\t\t\t\t\t\t<div className=\"update-post\">\r\n\t\t\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\t\t\tdefaultValue={post.message}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setTextUpdate(e.target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<div className=\"button-container\">\r\n\t\t\t\t\t\t\t\t\t<button className=\"btn\" onClick={updateItem}>\r\n\t\t\t\t\t\t\t\t\t\tValider modification\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{post.picture && (\r\n\t\t\t\t\t\t\t<img src={post.picture} alt=\"card-pic\" className=\"card-pic\" />\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{post.video && ( /* pour mettre la vidéo à une certaine taille dans le post, ce sont les paramètres pour afficher des vidéos youtube */\r\n\t\t\t\t\t\t\t<iframe\r\n\t\t\t\t\t\t\t\twidth=\"500\"\r\n\t\t\t\t\t\t\t\theight=\"300\"\r\n\t\t\t\t\t\t\t\tsrc={post.video}\r\n\t\t\t\t\t\t\t\tframeBorder=\"0\"\r\n\t\t\t\t\t\t\t\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n\t\t\t\t\t\t\t\tallowFullScreen\r\n\t\t\t\t\t\t\t\ttitle={post._id}\r\n\t\t\t\t\t\t\t></iframe>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{userData._id === post.posterId && ( /* donne la posiblité d'édit notre post uniquement si c'est le notre */\r\n\t\t\t\t\t\t\t<div className=\"button-container\">\r\n\t\t\t\t\t\t\t\t<div onClick={() => setIsUpdated(!isUpdated)} /* Permet de retirer l'édition quand on clique sur le bouton */>\r\n\t\t\t\t\t\t\t\t\t<img src=\"./img/icons/edit.svg\" alt=\"edit\" />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<DeleteCard id={post._id} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<div className=\"card-footer\"> {/* Pour afficher tout les commentaires  */}\r\n\t\t\t\t\t\t\t<div className=\"comment-icon\">\r\n\t\t\t\t\t\t\t\t<img onClick={() => setShowComments(!showComments)}\r\n\t\t\t\t\t\t\t\t\tsrc=\"./img/icons/message1.svg\"\r\n\t\t\t\t\t\t\t\t\talt=\"comment\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<span> {post.comments.length}</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<LikeButton post={post} /> {/* pour récup les données et voir les likes de chaque post*/}    \r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t{showComments && <CardComment post={post} />}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default Card;"]},"metadata":{},"sourceType":"module"}