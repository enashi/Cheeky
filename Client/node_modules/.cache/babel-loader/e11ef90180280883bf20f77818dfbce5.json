{"ast":null,"code":"var _jsxFileName = \"/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { UidContext } from './component/AppContext';\nimport NavigationPanel from './component/NavigationPanel';\nimport axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from './component/Utilitaire/actions/user.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [uid, setUid] = useState(null); //permet de vérifier l'authentification d'un utilisateur --> token , cookie\n  //des qu'on arrive sur notre application, a chaque fois qu'on va appeler le components, ca va lancer useEffect qui controle le token de l'utilisateur\n\n  const dispatch = useDispatch(); //perme d'envoyer l'action\n\n  useEffect(() => {\n    const fetchToken = async () => {\n      await axios({\n        method: \"get\",\n        url: `${process.env.REACT_APP_API_URL}jwtid`,\n        withCredentials: true\n      }).then(res => {\n        setUid(res.data);\n      }).catch(err => console.log(\"No token\"));\n    };\n\n    fetchToken();\n    if (uid) dispatch(getUser(uid)); //on met l'id de l'utilisateur dans le store\n  }, [uid, dispatch]);\n  return /*#__PURE__*/_jsxDEV(UidContext.Provider, {\n    value: uid,\n    children: /*#__PURE__*/_jsxDEV(NavigationPanel, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"YzyYvEFqquQrXcJcWepHN8nOQ7U=\", false, function () {\n  return [useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/App.js"],"names":["React","useEffect","useState","UidContext","NavigationPanel","axios","useDispatch","getUser","App","uid","setUid","dispatch","fetchToken","method","url","process","env","REACT_APP_API_URL","withCredentials","then","res","data","catch","err","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,QAAwB,6CAAxB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,GAAD,EAAKC,MAAL,IAAeR,QAAQ,CAAC,IAAD,CAA7B,CADgB,CACqB;AACrC;;AAEA,QAAMS,QAAQ,GAAGL,WAAW,EAA5B,CAJgB,CAIiB;;AACjCL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,UAAU,GAAG,YAAY;AAC7B,YAAMP,KAAK,CAAC;AACVQ,QAAAA,MAAM,EAAE,KADE;AAEVC,QAAAA,GAAG,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,OAF5B;AAGVC,QAAAA,eAAe,EAAE;AAHP,OAAD,CAAL,CAKHC,IALG,CAKGC,GAAD,IAAS;AACbV,QAAAA,MAAM,CAACU,GAAG,CAACC,IAAL,CAAN;AACD,OAPG,EAQHC,KARG,CAQIC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,UAAZ,CARZ,CAAN;AASD,KAVD;;AAWAb,IAAAA,UAAU;AACV,QAAGH,GAAH,EAAQE,QAAQ,CAACJ,OAAO,CAACE,GAAD,CAAR,CAAR,CAbM,CAaiB;AAChC,GAdQ,EAcP,CAACA,GAAD,EAAME,QAAN,CAdO,CAAT;AAiBA,sBACE,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAIF,GAA9B;AAAA,2BACI,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA7BD;;GAAMD,G;UAIaF,W;;;KAJbE,G;AA+BN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { UidContext } from './component/AppContext';\nimport NavigationPanel from './component/NavigationPanel';\nimport axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from './component/Utilitaire/actions/user.actions';\n\nconst App = () => {\n  const [uid,setUid] = useState(null); //permet de vérifier l'authentification d'un utilisateur --> token , cookie\n  //des qu'on arrive sur notre application, a chaque fois qu'on va appeler le components, ca va lancer useEffect qui controle le token de l'utilisateur\n\n  const dispatch = useDispatch();  //perme d'envoyer l'action\n  useEffect(() => {\n    const fetchToken = async () => {\n      await axios({\n        method: \"get\",\n        url: `${process.env.REACT_APP_API_URL}jwtid`,\n        withCredentials: true,\n      })\n        .then((res) => {\n          setUid(res.data);\n        })\n        .catch((err) => console.log(\"No token\"));\n    };\n    fetchToken();\n    if(uid) dispatch(getUser(uid)) //on met l'id de l'utilisateur dans le store\n  },[uid, dispatch]);\n\n\n  return (\n    <UidContext.Provider value = {uid}>\n        <NavigationPanel />\n    </UidContext.Provider>\n     \n\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}