{"ast":null,"code":"var _jsxFileName = \"/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Page/Post/FakeCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { UidContext } from \"../../AppContext\";\nimport Popup from 'reactjs-popup'; //petite librairie qui gère les popups\n\nimport 'reactjs-popup/dist/index.css';\nimport { useDispatch } from 'react-redux';\nimport { fakePost } from '../../Utilitaire/actions/post.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FakeButton = ({\n  post\n}) => {\n  _s();\n\n  const [faked, setFaked] = useState(false); //pour voir si c'est liké de base ou non (ici non)\n\n  const uid = useContext(UidContext); //on récupère seulement l'uid de notre utilisateur\n\n  const dispatch = useDispatch(); // pour lancer notre fonction\n\n  const fake = () => {\n    dispatch(fakePost(post._id, uid));\n    setLiked(true);\n  };\n\n  const unfake = () => {\n    setLiked(false);\n  };\n\n  useEffect(() => {\n    if (post.fake.includes(uid)) setFaked(true); //on regarde si l'id de notre utilisateur est dans le tableau des likes du post\n    else setFaked(false);\n  }, [uid, post.fake, faked]); //on lance quand on récup le uid, et on le relance quand on a la tableau des posts et quand on like\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"liked-container\",\n    children: [uid === null &&\n    /*#__PURE__*/\n\n    /*Si on est pas connecté alors on peut pas like le post */\n    _jsxDEV(Popup, {\n      trigger: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./img/icons/close-2.png\",\n        width: \"20px\",\n        height: \"20px\",\n        alt: \"fake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this),\n      position: ['bottom center', 'bottom right', 'bottom left'],\n      closeOnDocumentClick: true,\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), uid && faked === false && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"./img/icons/close-2.png\",\n      width: \"20px\",\n      height: \"20px\",\n      onClick: fake,\n      alt: \"fake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this), uid && faked && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"./img/icons/close.png\",\n      width: \"20px\",\n      height: \"20px\",\n      onClick: unfake,\n      alt: \"unfake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: post.fake.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n};\n\n_s(FakeButton, \"FZ5Yuk2YYgpVDmRL9bZS+4eE2NI=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FakeButton;\nexport default FakeButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"FakeButton\");","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Page/Post/FakeCard.js"],"names":["React","useContext","useEffect","useState","UidContext","Popup","useDispatch","fakePost","FakeButton","post","faked","setFaked","uid","dispatch","fake","_id","setLiked","unfake","includes","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,eAAlB,C,CAAmC;;AACnC,OAAO,8BAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,uCAAzB;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAAA;;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC,CAD8B,CACa;;AAC3C,QAAMS,GAAG,GAAGX,UAAU,CAACG,UAAD,CAAtB,CAF8B,CAEM;;AACpC,QAAMS,QAAQ,GAAGP,WAAW,EAA5B,CAH8B,CAGE;;AAEhC,QAAMQ,IAAI,GAAG,MAAM;AAClBD,IAAAA,QAAQ,CAACN,QAAQ,CAACE,IAAI,CAACM,GAAN,EAAWH,GAAX,CAAT,CAAR;AACAI,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,GAHD;;AAKA,QAAMC,MAAM,GAAG,MAAM;AACpBD,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,GAFD;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIO,IAAI,CAACK,IAAL,CAAUI,QAAV,CAAmBN,GAAnB,CAAJ,EAA6BD,QAAQ,CAAC,IAAD,CAAR,CAA7B,CAA4C;AAA5C,SACKA,QAAQ,CAAC,KAAD,CAAR;AACL,GAHQ,EAGN,CAACC,GAAD,EAAMH,IAAI,CAACK,IAAX,EAAiBJ,KAAjB,CAHM,CAAT,CAd8B,CAiBF;;AAE5B,sBACC;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,eACEE,GAAG,KAAK,IAAR;AAAA;;AAAgB;AAChB,YAAC,KAAD;AAAO,MAAA,OAAO,eAAE;AAAK,QAAA,GAAG,EAAC,yBAAT;AAAmC,QAAA,KAAK,EAAC,MAAzC;AAAgD,QAAA,MAAM,EAAC,MAAvD;AAA8D,QAAA,GAAG,EAAC;AAAlE;AAAA;AAAA;AAAA;AAAA,cAAhB;AAA6F,MAAA,QAAQ,EACpG,CAAC,eAAD,EAAkB,cAAlB,EAAkC,aAAlC,CADD;AAEE,MAAA,oBAAoB,MAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAOEA,GAAG,IAAIF,KAAK,KAAK,KAAjB,iBACA;AAAK,MAAA,GAAG,EAAC,yBAAT;AAAmC,MAAA,KAAK,EAAC,MAAzC;AAAgD,MAAA,MAAM,EAAC,MAAvD;AAA8D,MAAA,OAAO,EAAEI,IAAvE;AAA6E,MAAA,GAAG,EAAC;AAAjF;AAAA;AAAA;AAAA;AAAA,YARF,EAUEF,GAAG,IAAIF,KAAP,iBACA;AAAK,MAAA,GAAG,EAAC,uBAAT;AAAiC,MAAA,KAAK,EAAC,MAAvC;AAA8C,MAAA,MAAM,EAAC,MAArD;AAA4D,MAAA,OAAO,EAAEO,MAArE;AAA6E,MAAA,GAAG,EAAC;AAAjF;AAAA;AAAA;AAAA;AAAA,YAXF,eAaC;AAAA,gBAAOR,IAAI,CAACK,IAAL,CAAUK;AAAjB;AAAA;AAAA;AAAA;AAAA,YAbD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAiBA,CApCD;;GAAMX,U;UAGYF,W;;;KAHZE,U;AAsCN,eAAeA,UAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { UidContext } from \"../../AppContext\"; \nimport Popup from 'reactjs-popup'; //petite librairie qui gère les popups\nimport 'reactjs-popup/dist/index.css';\nimport { useDispatch } from 'react-redux';\nimport { fakePost } from '../../Utilitaire/actions/post.actions';\n\nconst FakeButton = ({post}) => {\n\tconst [faked, setFaked] = useState(false); //pour voir si c'est liké de base ou non (ici non)\n\tconst uid = useContext(UidContext); //on récupère seulement l'uid de notre utilisateur\n\tconst dispatch = useDispatch(); // pour lancer notre fonction\n\n\tconst fake = () => {\n\t\tdispatch(fakePost(post._id, uid))\n\t\tsetLiked(true);\n\t}\n    \n\tconst unfake = () => {\n\t\tsetLiked(false);\n\t}\n\n\tuseEffect(() => { \n\t\tif (post.fake.includes(uid)) setFaked(true) //on regarde si l'id de notre utilisateur est dans le tableau des likes du post\n\t\telse setFaked(false)\n\t}, [uid, post.fake, faked]) //on lance quand on récup le uid, et on le relance quand on a la tableau des posts et quand on like\n\n\treturn (\n\t\t<div className=\"liked-container\">\n\t\t\t{uid === null && /*Si on est pas connecté alors on peut pas like le post */\n\t\t\t\t<Popup trigger={<img src=\"./img/icons/close-2.png\" width=\"20px\" height=\"20px\" alt=\"fake\" />} position={\n\t\t\t\t\t['bottom center', 'bottom right', 'bottom left']\n\t\t\t\t} closeOnDocumentClick> {/* dès qu'on clique ailleurs ca ferme la fenetre */}\n\t\t\t\t</Popup>\n\t\t\t}\n\t\t\t{uid && faked === false && (\n\t\t\t\t<img src=\"./img/icons/close-2.png\" width=\"20px\" height=\"20px\" onClick={fake} alt=\"fake\" />\n\t\t\t)}\n\t\t\t{uid && faked && (\n\t\t\t\t<img src=\"./img/icons/close.png\" width=\"20px\" height=\"20px\" onClick={unfake} alt=\"unfake\" />\n\t\t\t)}\n\t\t\t<span>{post.fake.length}</span>\n\t\t</div>\n\t);\n};\n\nexport default FakeButton;"]},"metadata":{},"sourceType":"module"}