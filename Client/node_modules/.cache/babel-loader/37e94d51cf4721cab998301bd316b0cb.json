{"ast":null,"code":"var _jsxFileName = \"/Users/ihsaneboubrik/Desktop/L3/S6/LU3IN017/TME/dossier sans titre/cheeky/Client/src/component/Page/Profil/Follow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { followUser, unfollowUser } from \"../../Utilitaire/actions/user.actions\";\nimport { isEmpty } from \"../../Utilitaire/Util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FollowHandler = ({\n  idToFollow,\n  type\n}) => {\n  _s();\n\n  //le type permet d'avoir un affichage pour suivre ou unfollow quelqu'un différent. Si c'est un card alors c'est un petit rond, sinon c'est un bouton classique\n  const userData = useSelector(state => state.userReducer);\n  const [isFollowed, setIsFollowed] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleFollow = () => {\n    dispatch(followUser(userData._id, idToFollow));\n    setIsFollowed(true);\n  };\n\n  const handleUnfollow = () => {\n    dispatch(unfollowUser(userData._id, idToFollow));\n    setIsFollowed(false);\n  }; //est appelé à chaque fois, il est relancé dès qu'on a de la userData\n  // en Js on peut pas trop voir quand de la data est la de facon absolue\n  //donc on export une fonction isEmpty qui retourne soit true ou false (true si vide)\n\n\n  useEffect(() => {\n    if (!isEmpty(userData.following)) {\n      //si ce n'est pas vide  alors on lance  la fonction\n      if (userData.following.includes(idToFollow)) {\n        setIsFollowed(true);\n      } else setIsFollowed(false);\n    }\n  }, [userData, idToFollow]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isFollowed && !isEmpty(userData) &&\n    /*#__PURE__*/\n\n    /* On regarde si la data n'est pas vide */\n    _jsxDEV(\"span\", {\n      onClick: handleUnfollow,\n      children: [type === \"suggestion\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"unfollow-btn\",\n        children: \"Abonn\\xE9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 43\n      }, this), type === \"card\" && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./img/icons/checked.svg\",\n        alt: \"checked\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), isFollowed === false && !isEmpty(userData) && /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: handleFollow,\n      children: [type === \"suggestion\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"follow-btn\",\n        children: \"Suivre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 43\n      }, this), type === \"card\" && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./img/icons/check.svg\",\n        alt: \"check\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FollowHandler, \"pkrTJJokSYBGY1rZZs5rw88zPE4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = FollowHandler;\nexport default FollowHandler;\n\nvar _c;\n\n$RefreshReg$(_c, \"FollowHandler\");","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6/LU3IN017/TME/dossier sans titre/cheeky/Client/src/component/Page/Profil/Follow.js"],"names":["React","useEffect","useState","useDispatch","useSelector","followUser","unfollowUser","isEmpty","FollowHandler","idToFollow","type","userData","state","userReducer","isFollowed","setIsFollowed","dispatch","handleFollow","_id","handleUnfollow","following","includes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,uCAAzC;AACA,SAASC,OAAT,QAAwB,uBAAxB;;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAA0B;AAAA;;AAAE;AAChD,QAAMC,QAAQ,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAA5B;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMc,QAAQ,GAAGb,WAAW,EAA5B;;AAEA,QAAMc,YAAY,GAAG,MAAM;AACzBD,IAAAA,QAAQ,CAACX,UAAU,CAACM,QAAQ,CAACO,GAAV,EAAeT,UAAf,CAAX,CAAR;AACAM,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAHD;;AAKA,QAAMI,cAAc,GAAG,MAAM;AAC3BH,IAAAA,QAAQ,CAACV,YAAY,CAACK,QAAQ,CAACO,GAAV,EAAeT,UAAf,CAAb,CAAR;AACAM,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD,CAV8C,CAgB9C;AACA;AACA;;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,OAAO,CAACI,QAAQ,CAACS,SAAV,CAAZ,EAAkC;AAAE;AAClC,UAAIT,QAAQ,CAACS,SAAT,CAAmBC,QAAnB,CAA4BZ,UAA5B,CAAJ,EAA6C;AAC3CM,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAFD,MAEOA,aAAa,CAAC,KAAD,CAAb;AACR;AACF,GANQ,EAMN,CAACJ,QAAD,EAAWF,UAAX,CANM,CAAT;AAQE,sBACI;AAAA,eACCK,UAAU,IAAI,CAACP,OAAO,CAACI,QAAD,CAAtB;AAAA;;AAAuC;AACpC;AAAM,MAAA,OAAO,EAAEQ,cAAf;AAAA,iBACKT,IAAI,KAAK,YAAT,iBAAyB;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD9B,EAEKA,IAAI,KAAK,MAAT,iBAAmB;AAAK,QAAA,GAAG,EAAC,yBAAT;AAAmC,QAAA,GAAG,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,cAFxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAQCI,UAAU,KAAK,KAAf,IAAwB,CAACP,OAAO,CAACI,QAAD,CAAhC,iBACG;AAAM,MAAA,OAAO,EAAEM,YAAf;AAAA,iBACKP,IAAI,KAAK,YAAT,iBAAyB;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD9B,EAEKA,IAAI,KAAK,MAAT,iBAAmB;AAAK,QAAA,GAAG,EAAC,uBAAT;AAAiC,QAAA,GAAG,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,cAFxB;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADJ;AAiBH,CA7CD;;GAAMF,a;UACaJ,W,EAEAD,W;;;KAHbK,a;AAgDN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { followUser, unfollowUser } from \"../../Utilitaire/actions/user.actions\";\r\nimport { isEmpty } from \"../../Utilitaire/Util\";\r\n\r\nconst FollowHandler = ({ idToFollow, type }) => { //le type permet d'avoir un affichage pour suivre ou unfollow quelqu'un différent. Si c'est un card alors c'est un petit rond, sinon c'est un bouton classique\r\n  const userData = useSelector((state) => state.userReducer);\r\n  const [isFollowed, setIsFollowed] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleFollow = () => {\r\n    dispatch(followUser(userData._id, idToFollow));\r\n    setIsFollowed(true);\r\n  };\r\n\r\n  const handleUnfollow = () => {\r\n    dispatch(unfollowUser(userData._id, idToFollow));\r\n    setIsFollowed(false);\r\n  };\r\n\r\n\r\n  //est appelé à chaque fois, il est relancé dès qu'on a de la userData\r\n  // en Js on peut pas trop voir quand de la data est la de facon absolue\r\n  //donc on export une fonction isEmpty qui retourne soit true ou false (true si vide)\r\n  \r\n  useEffect(() => {\r\n    if (!isEmpty(userData.following)) { //si ce n'est pas vide  alors on lance  la fonction\r\n      if (userData.following.includes(idToFollow)) {\r\n        setIsFollowed(true);\r\n      } else setIsFollowed(false);\r\n    }\r\n  }, [userData, idToFollow]);\r\n\r\n    return (\r\n        <>\r\n        {isFollowed && !isEmpty(userData) && (  /* On regarde si la data n'est pas vide */\r\n            <span onClick={handleUnfollow}>\r\n                {type === \"suggestion\" && <button className=\"unfollow-btn\">Abonné</button>}\r\n                {type === \"card\" && <img src=\"./img/icons/checked.svg\" alt=\"checked\" />}\r\n            </span>\r\n        )}\r\n\r\n        {isFollowed === false && !isEmpty(userData) && ( \r\n            <span onClick={handleFollow}>\r\n                {type === \"suggestion\" && <button className=\"follow-btn\">Suivre</button>}\r\n                {type === \"card\" && <img src=\"./img/icons/check.svg\" alt=\"check\" />}\r\n            </span>\r\n        )}\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default FollowHandler;"]},"metadata":{},"sourceType":"module"}