{"ast":null,"code":"import axios from \"axios\"; // c'est une table des matières de nos actions \n//pour que ce soit reconnu dans notre reducers\n\nexport const GET_USER = \"GET_USER\";\nexport const UPLOAD_PICTURE = \"UPLOAD_PICTURE\";\nexport const GET_USER_ERRORS = \"GET_USER_ERRORS\";\nexport const UPDATE_BIO = \"UPDATE_BIO\";\nexport const FOLLOW_USER = \"FOLLOW_USER\";\nexport const UNFOLLOW_USER = \"UNFOLLOW_USER\"; //dispatch permet de déclencher un changement d'état\n\nexport const getUser = uid => {\n  return dispatch => {\n    //dispatch c'est ce qu'on va envoyer au reducer\n    return axios.get(`${process.env.REACT_APP_API_URL}api/user/${uid}`).then(res => {\n      dispatch({\n        type: GET_USER,\n        payload: res.data\n      }); //toute la data qu'on vient de chercher, on la passe au reduxer\n    }).catch(err => console.log(err));\n  };\n};\nexport const uploadPicture = (data, id) => {\n  return dispatch => {\n    return axios.post(`${process.env.REACT_APP_API_URL}api/user/upload`, data).then(res => {\n      if (res.data.errors) {\n        dispatch({\n          type: 'GET_USER_ERRORS',\n          payload: res.data.errors\n        });\n      } else {\n        dispatch({\n          type: 'GET_USER_ERRORS',\n          payload: \"\"\n        });\n        return axios.get(`${process.env.REACT_APP_API_URL}api/user/${id}`).then(res => {\n          dispatch({\n            type: UPLOAD_PICTURE,\n            payload: res.data.picture\n          });\n        });\n      }\n    }).catch(err => console.log(err));\n  };\n};\nexport const updateBio = (userId, bio) => {\n  return dispatch => {\n    return axios({\n      method: \"put\",\n      url: `${process.env.REACT_APP_API_URL}api/user/` + userId,\n      data: {\n        bio\n      }\n    }).then(res => {\n      dispatch({\n        type: UPDATE_BIO,\n        payload: bio\n      }); //payload : donnée qu'on envoie dans notre store\n    }).catch(err => console.log(err));\n  };\n};\nexport const followUser = (followerId, idToFollow) => {\n  return dispatch => {\n    return axios({\n      method: \"patch\",\n      url: `${process.env.REACT_APP_API_URL}api/user/follow/` + followerId,\n      data: {\n        idToFollow\n      }\n    }).then(res => {\n      dispatch({\n        type: FOLLOW_USER,\n        payload: {\n          idToFollow\n        }\n      }); //on envoie juste la modification visuel pour l'utilisateur actuel\n    }).catch(err => console.log(err));\n  };\n};\nexport const unfollowUser = (followerId, idToUnfollow) => {\n  return dispatch => {\n    return axios({\n      method: \"patch\",\n      url: `${process.env.REACT_APP_API_URL}api/user/unfollow/` + followerId,\n      data: {\n        idToUnfollow\n      }\n    }).then(res => {\n      dispatch({\n        type: UNFOLLOW_USER,\n        payload: {\n          idToUnfollow\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Utilitaire/actions/user.actions.js"],"names":["axios","GET_USER","UPLOAD_PICTURE","GET_USER_ERRORS","UPDATE_BIO","FOLLOW_USER","UNFOLLOW_USER","getUser","uid","dispatch","get","process","env","REACT_APP_API_URL","then","res","type","payload","data","catch","err","console","log","uploadPicture","id","post","errors","picture","updateBio","userId","bio","method","url","followUser","followerId","idToFollow","unfollowUser","idToUnfollow"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\n// c'est une table des matières de nos actions \r\n//pour que ce soit reconnu dans notre reducers\r\nexport const GET_USER = \"GET_USER\"; \r\nexport const UPLOAD_PICTURE = \"UPLOAD_PICTURE\";\r\nexport const GET_USER_ERRORS = \"GET_USER_ERRORS\";\r\nexport const UPDATE_BIO = \"UPDATE_BIO\";\r\nexport const FOLLOW_USER = \"FOLLOW_USER\";\r\nexport const UNFOLLOW_USER = \"UNFOLLOW_USER\";\r\n\r\n//dispatch permet de déclencher un changement d'état\r\n\r\nexport const getUser = (uid) => {\r\n\t\treturn(dispatch) => { //dispatch c'est ce qu'on va envoyer au reducer\r\n\t\t\t\treturn axios\r\n\t\t\t\t.get(`${process.env.REACT_APP_API_URL}api/user/${uid}`)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tdispatch({ type: GET_USER, payload: res.data }); //toute la data qu'on vient de chercher, on la passe au reduxer\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => console.log(err));\r\n\t\t};\r\n\t};\r\n\r\nexport const uploadPicture = (data,id) =>{\r\n\treturn(dispatch)=>{\r\n\t\treturn axios \r\n\t\t\t.post(`${process.env.REACT_APP_API_URL}api/user/upload`,data)\r\n\t\t\t.then((res) =>{\r\n\t\t\t\tif (res.data.errors){\r\n\t\t\t\t\tdispatch({type: 'GET_USER_ERRORS', payload: res.data.errors})\r\n\t\t\t\t}else{\r\n\t\t\t\t\tdispatch({type: 'GET_USER_ERRORS', payload: \"\"});\r\n\t\t\t\t\treturn axios  \r\n\t\t\t\t\t\t.get(`${process.env.REACT_APP_API_URL}api/user/${id}`)\r\n\t\t\t\t\t\t.then((res)=>{\r\n\t\t\t\t\t\t\tdispatch({type : UPLOAD_PICTURE, payload: res.data.picture})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t\t.catch((err)=> console.log(err))\r\n\t};\r\n};\r\n\r\n\r\nexport const updateBio = (userId, bio) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\t\tmethod: \"put\",\r\n\t\t\t\turl: `${process.env.REACT_APP_API_URL}api/user/` +userId,\r\n\t\t\t\tdata : {bio}\r\n\t\t})\r\n\t\t.then((res) =>{\r\n\t\t\tdispatch({type: UPDATE_BIO, payload:bio}) //payload : donnée qu'on envoie dans notre store\r\n\t\t})\r\n\t\t\t.catch((err) => console.log(err))\r\n\t};\r\n};\r\n\r\nexport const followUser = (followerId, idToFollow) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: \"patch\",\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/user/follow/` + followerId,\r\n\t\t\tdata: { idToFollow },\r\n\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\tdispatch({ type: FOLLOW_USER, payload: { idToFollow } });//on envoie juste la modification visuel pour l'utilisateur actuel\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n};\r\n\r\nexport const unfollowUser = (followerId, idToUnfollow) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: \"patch\",\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/user/unfollow/` + followerId,\r\n\t\t\tdata: { idToUnfollow },\r\n\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\tdispatch({ type: UNFOLLOW_USER, payload: { idToUnfollow } });\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n};"]},"metadata":{},"sourceType":"module"}