{"ast":null,"code":"import axios from \"axios\"; //posts\n\nexport const GET_POSTS = \"GET_POSTS\"; //pour avoir les derniers posts --> permet le scrolling\n\nexport const GET_ALL_POSTS = \"GET_ALL_POSTS\"; //on recupère TOUT les postes pour le trend \n\nexport const ADD_POST = \"ADD_POST\";\nexport const LIKE_POST = \"LIKE_POST\";\nexport const UNLIKE_POST = \"UNLIKE_POST\";\nexport const UPDATE_POST = \"UPDATE_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\nexport const FAKE_POST = \"FAKE_POST\";\nexport const UNFAKE_POST = \"UNFAKE_POST\"; //comments\n\nexport const ADD_COMMENT = \"ADD_COMMENT\";\nexport const EDIT_COMMENT = \"EDIT_COMMENT\";\nexport const DELETE_COMMENT = \"DELETE_COMMENT\"; //trends\n\nexport const GET_TRENDS = \"GET_TRENDS\"; //errors\n\nexport const GET_POST_ERRORS = \"GET_POST_ERRORS\"; //posts\n//pour afficher tout les posts\n\nexport const getPosts = number => {\n  //number c'est pour le nombre  de poste qu'on affiche\n  return dispatch => {\n    return axios.get(`${process.env.REACT_APP_API_URL}api/post/`).then(res => {\n      const array = res.data.slice(0, number); //a partir du premier élement jusqu'a number. On prend donc que 5 messages\n\n      dispatch({\n        type: GET_POSTS,\n        payload: array\n      });\n      dispatch({\n        type: GET_ALL_POSTS,\n        payload: res.data\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const addPost = (posterId, message) => {\n  return dispatch => {\n    return axios({\n      method: 'post',\n      url: `${process.env.REACT_APP_API_URL}api/post/`,\n      data: {\n        posterId,\n        message\n      }\n    }).then(res => {\n      if (res.data.errors) {\n        dispatch({\n          type: GET_POST_ERRORS,\n          payload: res.data.errors\n        });\n      } else {\n        dispatch({\n          type: GET_POST_ERRORS,\n          payload: ''\n        }); //s'il n'y a pas d'erreurs alors on met a vide\n      }\n    });\n  };\n};\nexport const likePost = (postId, userId) => {\n  return dispatch => {\n    return axios({\n      method: 'patch',\n      url: `${process.env.REACT_APP_API_URL}api/post/like-post/` + postId,\n      data: {\n        id: userId\n      }\n    }).then(res => {\n      dispatch({\n        type: LIKE_POST,\n        payload: {\n          postId,\n          userId\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const unlikePost = (postId, userId) => {\n  return dispatch => {\n    return axios({\n      method: 'patch',\n      url: `${process.env.REACT_APP_API_URL}api/post/unlike-post/` + postId,\n      data: {\n        id: userId\n      }\n    }).then(res => {\n      dispatch({\n        type: UNLIKE_POST,\n        payload: {\n          postId,\n          userId\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const updatePost = (postId, message) => {\n  return dispatch => {\n    return axios({\n      method: 'put',\n      url: `${process.env.REACT_APP_API_URL}api/post/${postId}`,\n      data: {\n        message\n      }\n    }).then(res => {\n      dispatch({\n        type: UPDATE_POST,\n        payload: {\n          message,\n          postId\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const deletePost = postId => {\n  return dispatch => {\n    return axios({\n      method: 'delete',\n      url: `${process.env.REACT_APP_API_URL}api/post/${postId}`\n    }).then(res => {\n      dispatch({\n        type: DELETE_POST,\n        payload: {\n          postId\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n}; //comments\n\nexport const addComment = (postId, commenterId, text, commenterPseudo) => {\n  return dispatch => {\n    return axios({\n      method: 'patch',\n      url: `${process.env.REACT_APP_API_URL}api/post/comment-post/${postId}`,\n      data: {\n        commenterId,\n        text,\n        commenterPseudo\n      }\n    }).then(res => {\n      dispatch({\n        type: ADD_COMMENT,\n        payload: {\n          postId\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const editComment = (postId, commentId, text) => {\n  return dispatch => {\n    return axios({\n      method: 'patch',\n      url: `${process.env.REACT_APP_API_URL}api/post/edit-comment-post/${postId}`,\n      data: {\n        commentId,\n        text\n      }\n    }).then(res => {\n      dispatch({\n        type: EDIT_COMMENT,\n        payload: {\n          postId,\n          commentId,\n          text\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const deleteComment = (postId, commentId) => {\n  return dispatch => {\n    return axios({\n      method: 'patch',\n      url: `${process.env.REACT_APP_API_URL}api/post/delete-comment-post/${postId}`,\n      data: {\n        commentId\n      }\n    }).then(res => {\n      dispatch({\n        type: DELETE_COMMENT,\n        payload: {\n          postId,\n          commentId\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const getTrends = sortedArray => {\n  return dispatch => {\n    dispatch({\n      type: GET_TRENDS,\n      payload: sortedArray\n    });\n  };\n};\nexport const fakePost = (postId, userId) => {\n  return dispatch => {\n    return axios({\n      method: 'patch',\n      url: `${process.env.REACT_APP_API_URL}api/post/fake-post/` + postId,\n      data: {\n        id: userId\n      }\n    }).then(res => {\n      dispatch({\n        type: FAKE_POST,\n        payload: {\n          postId,\n          userId\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const unfakePost = (postId, userId) => {\n  return dispatch => {\n    return axios({\n      method: 'patch',\n      url: `${process.env.REACT_APP_API_URL}api/post/fake-post/` + postId,\n      data: {\n        id: userId\n      }\n    }).then(res => {\n      dispatch({\n        type: UNFAKE_POST,\n        payload: {\n          postId,\n          userId\n        }\n      });\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Utilitaire/actions/post.actions.js"],"names":["axios","GET_POSTS","GET_ALL_POSTS","ADD_POST","LIKE_POST","UNLIKE_POST","UPDATE_POST","DELETE_POST","FAKE_POST","UNFAKE_POST","ADD_COMMENT","EDIT_COMMENT","DELETE_COMMENT","GET_TRENDS","GET_POST_ERRORS","getPosts","number","dispatch","get","process","env","REACT_APP_API_URL","then","res","array","data","slice","type","payload","catch","err","console","log","addPost","posterId","message","method","url","errors","likePost","postId","userId","id","unlikePost","updatePost","deletePost","addComment","commenterId","text","commenterPseudo","editComment","commentId","deleteComment","getTrends","sortedArray","fakePost","unfakePost"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,WAAlB,C,CAA+B;;AACtC,OAAO,MAAMC,aAAa,GAAG,eAAtB,C,CAAsC;;AAC7C,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAEP;;AACA,OAAO,MAAMC,UAAU,GAAG,YAAnB,C,CAEP;;AACA,OAAO,MAAMC,eAAe,GAAG,iBAAxB,C,CAEP;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAAE;AACrC,SAAQC,QAAD,IAAc;AACpB,WAAQjB,KAAD,CACLkB,GADK,CACA,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,WADhC,EAELC,IAFK,CAECC,GAAD,IAAS;AACd,YAAMC,KAAK,GAAGD,GAAG,CAACE,IAAJ,CAASC,KAAT,CAAe,CAAf,EAAkBV,MAAlB,CAAd,CADc,CAC0B;;AACxCC,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAE1B,SAAR;AAAmB2B,QAAAA,OAAO,EAAEJ;AAA5B,OAAD,CAAR;AACAP,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAEzB,aAAR;AAAuB0B,QAAAA,OAAO,EAAEL,GAAG,CAACE;AAApC,OAAD,CAAR;AACA,KANK,EAOLI,KAPK,CAOEC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAPV,CAAP;AAQA,GATD;AAUA,CAXM;AAaP,OAAO,MAAMG,OAAO,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAC7C,SAAQlB,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,MADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,WAF1B;AAGZI,MAAAA,IAAI,EAAE;AAAES,QAAAA,QAAF;AAAYC,QAAAA;AAAZ;AAHM,KAAD,CAAL,CAKNb,IALM,CAKAC,GAAD,IAAS;AACd,UAAIA,GAAG,CAACE,IAAJ,CAASa,MAAb,EAAqB;AACpBrB,QAAAA,QAAQ,CAAC;AAAEU,UAAAA,IAAI,EAAEb,eAAR;AAAyBc,UAAAA,OAAO,EAAEL,GAAG,CAACE,IAAJ,CAASa;AAA3C,SAAD,CAAR;AACA,OAFD,MAEM;AACLrB,QAAAA,QAAQ,CAAC;AAAEU,UAAAA,IAAI,EAAEb,eAAR;AAAyBc,UAAAA,OAAO,EAAE;AAAlC,SAAD,CAAR,CADK,CAC6C;AAClD;AACD,KAXM,CAAP;AAYA,GAbD;AAcA,CAfM;AAiBP,OAAO,MAAMW,QAAQ,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC3C,SAAQxB,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,OADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,qBAAjC,GAAwDmB,MAFjD;AAGZf,MAAAA,IAAI,EAAE;AAAEiB,QAAAA,EAAE,EAAED;AAAN;AAHM,KAAD,CAAL,CAKNnB,IALM,CAKAC,GAAD,IAAS;AACdN,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAEvB,SAAR;AAAmBwB,QAAAA,OAAO,EAAE;AAACY,UAAAA,MAAD;AAASC,UAAAA;AAAT;AAA5B,OAAD,CAAR;AACA,KAPM,EAQNZ,KARM,CAQCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CART,CAAP;AASA,GAVD;AAWA,CAZM;AAcP,OAAO,MAAMa,UAAU,GAAG,CAACH,MAAD,EAASC,MAAT,KAAoB;AAC7C,SAAQxB,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,OADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,uBAAjC,GAA0DmB,MAFnD;AAGZf,MAAAA,IAAI,EAAE;AAAEiB,QAAAA,EAAE,EAAED;AAAN;AAHM,KAAD,CAAL,CAKNnB,IALM,CAKAC,GAAD,IAAS;AACdN,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAEtB,WAAR;AAAqBuB,QAAAA,OAAO,EAAE;AAACY,UAAAA,MAAD;AAASC,UAAAA;AAAT;AAA9B,OAAD,CAAR;AACA,KAPM,EAQNZ,KARM,CAQCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CART,CAAP;AASA,GAVD;AAWA,CAZM;AAcP,OAAO,MAAMc,UAAU,GAAG,CAACJ,MAAD,EAASL,OAAT,KAAqB;AAC9C,SAAQlB,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,YAAWmB,MAAO,EAF5C;AAGZf,MAAAA,IAAI,EAAE;AAACU,QAAAA;AAAD;AAHM,KAAD,CAAL,CAKNb,IALM,CAKAC,GAAD,IAAS;AACdN,MAAAA,QAAQ,CAAC;AACRU,QAAAA,IAAI,EAAErB,WADE;AACWsB,QAAAA,OAAO,EAAE;AAACO,UAAAA,OAAD;AAAUK,UAAAA;AAAV;AADpB,OAAD,CAAR;AAGA,KATM,EAUNX,KAVM,CAUCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAVT,CAAP;AAWA,GAZD;AAaA,CAdM;AAgBP,OAAO,MAAMe,UAAU,GAAIL,MAAD,IAAY;AACrC,SAAQvB,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,QADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,YAAWmB,MAAO;AAF5C,KAAD,CAAL,CAINlB,IAJM,CAIAC,GAAD,IAAS;AACdN,MAAAA,QAAQ,CAAC;AACRU,QAAAA,IAAI,EAAEpB,WADE;AACWqB,QAAAA,OAAO,EAAE;AAACY,UAAAA;AAAD;AADpB,OAAD,CAAR;AAGA,KARM,EASNX,KATM,CASCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CATT,CAAP;AAUA,GAXD;AAYA,CAbM,C,CAgBP;;AAEA,OAAO,MAAMgB,UAAU,GAAG,CAACN,MAAD,EAASO,WAAT,EAAsBC,IAAtB,EAA4BC,eAA5B,KAAgD;AACzE,SAAQhC,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,OADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,yBAAwBmB,MAAO,EAFzD;AAGZf,MAAAA,IAAI,EAAE;AAACsB,QAAAA,WAAD;AAAcC,QAAAA,IAAd;AAAoBC,QAAAA;AAApB;AAHM,KAAD,CAAL,CAKN3B,IALM,CAKAC,GAAD,IAAS;AACdN,MAAAA,QAAQ,CAAC;AACRU,QAAAA,IAAI,EAAEjB,WADE;AACWkB,QAAAA,OAAO,EAAE;AAACY,UAAAA;AAAD;AADpB,OAAD,CAAR;AAGA,KATM,EAUNX,KAVM,CAUCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAVT,CAAP;AAWA,GAZD;AAaA,CAdM;AAgBP,OAAO,MAAMoB,WAAW,GAAG,CAACV,MAAD,EAASW,SAAT,EAAoBH,IAApB,KAA6B;AACvD,SAAQ/B,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,OADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,8BAA6BmB,MAAO,EAF9D;AAGZf,MAAAA,IAAI,EAAE;AAAC0B,QAAAA,SAAD;AAAYH,QAAAA;AAAZ;AAHM,KAAD,CAAL,CAKN1B,IALM,CAKAC,GAAD,IAAS;AACdN,MAAAA,QAAQ,CAAC;AACRU,QAAAA,IAAI,EAAEhB,YADE;AACYiB,QAAAA,OAAO,EAAE;AAACY,UAAAA,MAAD;AAASW,UAAAA,SAAT;AAAoBH,UAAAA;AAApB;AADrB,OAAD,CAAR;AAGA,KATM,EAUNnB,KAVM,CAUCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAVT,CAAP;AAWA,GAZD;AAaA,CAdM;AAgBP,OAAO,MAAMsB,aAAa,GAAG,CAACZ,MAAD,EAASW,SAAT,KAAuB;AACnD,SAAQlC,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,OADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,gCAA+BmB,MAAO,EAFhE;AAGZf,MAAAA,IAAI,EAAE;AAAC0B,QAAAA;AAAD;AAHM,KAAD,CAAL,CAKN7B,IALM,CAKAC,GAAD,IAAS;AACdN,MAAAA,QAAQ,CAAC;AACRU,QAAAA,IAAI,EAAEf,cADE;AACcgB,QAAAA,OAAO,EAAE;AAACY,UAAAA,MAAD;AAASW,UAAAA;AAAT;AADvB,OAAD,CAAR;AAGA,KATM,EAUNtB,KAVM,CAUCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAVT,CAAP;AAWA,GAZD;AAaA,CAdM;AAiBP,OAAO,MAAMuB,SAAS,GAAIC,WAAD,IAAiB;AACzC,SAAQrC,QAAD,IAAc;AACpBA,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAEd,UAAR;AAAoBe,MAAAA,OAAO,EAAE0B;AAA7B,KAAD,CAAR;AACA,GAFD;AAGA,CAJM;AAMP,OAAO,MAAMC,QAAQ,GAAG,CAACf,MAAD,EAASC,MAAT,KAAoB;AAC3C,SAAQxB,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,OADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,qBAAjC,GAAwDmB,MAFjD;AAGZf,MAAAA,IAAI,EAAE;AAAEiB,QAAAA,EAAE,EAAED;AAAN;AAHM,KAAD,CAAL,CAKNnB,IALM,CAKAC,GAAD,IAAS;AACdN,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAEnB,SAAR;AAAmBoB,QAAAA,OAAO,EAAE;AAACY,UAAAA,MAAD;AAASC,UAAAA;AAAT;AAA5B,OAAD,CAAR;AACA,KAPM,EAQNZ,KARM,CAQCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CART,CAAP;AASA,GAVD;AAWA,CAZM;AAcP,OAAO,MAAM0B,UAAU,GAAG,CAAChB,MAAD,EAASC,MAAT,KAAoB;AAC7C,SAAQxB,QAAD,IAAc;AACpB,WAAOjB,KAAK,CAAC;AACZoC,MAAAA,MAAM,EAAE,OADI;AAEZC,MAAAA,GAAG,EAAG,GAAElB,OAAO,CAACC,GAAR,CAAYC,iBAAkB,qBAAjC,GAAwDmB,MAFjD;AAGZf,MAAAA,IAAI,EAAE;AAAEiB,QAAAA,EAAE,EAAED;AAAN;AAHM,KAAD,CAAL,CAKNnB,IALM,CAKAC,GAAD,IAAS;AACdN,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAElB,WAAR;AAAqBmB,QAAAA,OAAO,EAAE;AAACY,UAAAA,MAAD;AAASC,UAAAA;AAAT;AAA9B,OAAD,CAAR;AACA,KAPM,EAQNZ,KARM,CAQCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CART,CAAP;AASA,GAVD;AAWA,CAZM","sourcesContent":["import axios from \"axios\";\r\n\r\n//posts\r\nexport const GET_POSTS = \"GET_POSTS\"; //pour avoir les derniers posts --> permet le scrolling\r\nexport const GET_ALL_POSTS = \"GET_ALL_POSTS\";//on recupère TOUT les postes pour le trend \r\nexport const ADD_POST = \"ADD_POST\";\r\nexport const LIKE_POST = \"LIKE_POST\";\r\nexport const UNLIKE_POST = \"UNLIKE_POST\";\r\nexport const UPDATE_POST = \"UPDATE_POST\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\nexport const FAKE_POST = \"FAKE_POST\";\r\nexport const UNFAKE_POST = \"UNFAKE_POST\";\r\n\r\n//comments\r\nexport const ADD_COMMENT = \"ADD_COMMENT\";\r\nexport const EDIT_COMMENT = \"EDIT_COMMENT\";\r\nexport const DELETE_COMMENT = \"DELETE_COMMENT\";\r\n\r\n//trends\r\nexport const GET_TRENDS = \"GET_TRENDS\";\r\n\r\n//errors\r\nexport const GET_POST_ERRORS = \"GET_POST_ERRORS\";\r\n\r\n//posts\r\n\r\n//pour afficher tout les posts\r\nexport const getPosts = (number) => { //number c'est pour le nombre  de poste qu'on affiche\r\n\treturn (dispatch) => {\r\n\t\treturn (axios)\r\n\t\t\t.get(`${process.env.REACT_APP_API_URL}api/post/`)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconst array = res.data.slice(0, number) //a partir du premier élement jusqu'a number. On prend donc que 5 messages\r\n\t\t\t\tdispatch({ type: GET_POSTS, payload: array });\r\n\t\t\t\tdispatch({ type: GET_ALL_POSTS, payload: res.data});\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n};\r\n\r\nexport const addPost = (posterId, message) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'post',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/`,\r\n\t\t\tdata: { posterId, message }\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tif (res.data.errors) {\r\n\t\t\t\tdispatch({ type: GET_POST_ERRORS, payload: res.data.errors })\r\n\t\t\t} else{\r\n\t\t\t\tdispatch({ type: GET_POST_ERRORS, payload: '' }); //s'il n'y a pas d'erreurs alors on met a vide\r\n\t\t\t}\r\n\t\t})\r\n\t};\r\n}\r\n\r\nexport const likePost = (postId, userId) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'patch',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/like-post/` + postId,\r\n\t\t\tdata: { id: userId}\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tdispatch({ type: LIKE_POST, payload: {postId, userId}});\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n\t};\r\n};\r\n\r\nexport const unlikePost = (postId, userId) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'patch',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/unlike-post/` + postId,\r\n\t\t\tdata: { id: userId}\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tdispatch({ type: UNLIKE_POST, payload: {postId, userId}});\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n\t};\r\n};\r\n\r\nexport const updatePost = (postId, message) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'put',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/${postId}`,\r\n\t\t\tdata: {message},\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: UPDATE_POST, payload: {message, postId}\r\n\t\t\t});\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n\t};\r\n};\r\n\r\nexport const deletePost = (postId) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'delete',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/${postId}`\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: DELETE_POST, payload: {postId}\r\n\t\t\t});\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n\t};\r\n}\r\n\r\n\r\n//comments\r\n\r\nexport const addComment = (postId, commenterId, text, commenterPseudo) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'patch',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/comment-post/${postId}`,\r\n\t\t\tdata: {commenterId, text, commenterPseudo},\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ADD_COMMENT, payload: {postId} \r\n\t\t\t});\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n\t}\r\n}\r\n\r\nexport const editComment = (postId, commentId, text) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'patch',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/edit-comment-post/${postId}`,\r\n\t\t\tdata: {commentId, text},\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: EDIT_COMMENT, payload: {postId, commentId, text}\r\n\t\t\t});\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n\t}\r\n}\r\n\r\nexport const deleteComment = (postId, commentId) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'patch',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/delete-comment-post/${postId}`,\r\n\t\t\tdata: {commentId},\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: DELETE_COMMENT, payload: {postId, commentId}\r\n\t\t\t});\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n\t}\r\n}\r\n\r\n\r\nexport const getTrends = (sortedArray) => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch({ type: GET_TRENDS, payload: sortedArray});\r\n\t};\r\n};\r\n\r\nexport const fakePost = (postId, userId) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'patch',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/fake-post/` + postId,\r\n\t\t\tdata: { id: userId}\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tdispatch({ type: FAKE_POST, payload: {postId, userId}});\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n\t}\r\n}\r\n\r\nexport const unfakePost = (postId, userId) => {\r\n\treturn (dispatch) => {\r\n\t\treturn axios({\r\n\t\t\tmethod: 'patch',\r\n\t\t\turl: `${process.env.REACT_APP_API_URL}api/post/fake-post/` + postId,\r\n\t\t\tdata: { id: userId}\r\n\t\t})\r\n\t\t.then((res) => {\r\n\t\t\tdispatch({ type: UNFAKE_POST, payload: {postId, userId}});\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}