{"ast":null,"code":"import { FOLLOW_USER, GET_USER, UNFOLLOW_USER, UPDATE_BIO, UPLOAD_PICTURE } from \"../actions/user.actions\";\nconst initialState = {}; //Quand on va demander de la data, on va voir en premier lieu la db, puis on va la sotcker -> plus besoin à la db\n\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_USER:\n      return action.payload;\n    //Toute la data de res.data qui à été envoyé avec action.payload on incrémente notre initialState\n\n    case UPLOAD_PICTURE:\n      return { ...state,\n        //pour eviter d'écraser les données\n        picture: action.payload\n      };\n\n    case UPDATE_BIO:\n      return { ...state,\n        bio: action.payload\n      };\n\n    case FOLLOW_USER:\n      return { ...state,\n        following: [action.payload.idToFollow, ...state.following] //on recupère la suite de notre tableau pour pas écraser ce qu'on avait avant\n\n      };\n\n    case UNFOLLOW_USER:\n      return { ...state,\n        following: state.following.filter(id => id !== action.payload.idToUnfollow)\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Utilitaire/reducers/user.reducer.js"],"names":["FOLLOW_USER","GET_USER","UNFOLLOW_USER","UPDATE_BIO","UPLOAD_PICTURE","initialState","userReducer","state","action","type","payload","picture","bio","following","idToFollow","filter","id","idToUnfollow"],"mappings":"AAAA,SACIA,WADJ,EAEIC,QAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,cALJ,QAMS,yBANT;AAQE,MAAMC,YAAY,GAAG,EAArB,C,CAAyB;;AAEzB,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGF,YAA7B,EAA2CG,MAA3C,EAAmD;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,QAAL;AACE,aAAOO,MAAM,CAACE,OAAd;AAAuB;;AACzB,SAAKN,cAAL;AACE,aAAO,EACL,GAAGG,KADE;AACK;AACVI,QAAAA,OAAO,EAAEH,MAAM,CAACE;AAFX,OAAP;;AAIF,SAAKP,UAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELK,QAAAA,GAAG,EAAEJ,MAAM,CAACE;AAFP,OAAP;;AAIF,SAAKV,WAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELM,QAAAA,SAAS,EAAE,CAACL,MAAM,CAACE,OAAP,CAAeI,UAAhB,EAA4B,GAAGP,KAAK,CAACM,SAArC,CAFN,CAEuD;;AAFvD,OAAP;;AAIF,SAAKX,aAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELM,QAAAA,SAAS,EAAEN,KAAK,CAACM,SAAN,CAAgBE,MAAhB,CAAwBC,EAAD,IAAQA,EAAE,KAAKR,MAAM,CAACE,OAAP,CAAeO,YAArD;AAFN,OAAP;;AAIF;AACE,aAAOV,KAAP;AAxBJ;AA0BD","sourcesContent":["import {\r\n    FOLLOW_USER,\r\n    GET_USER,\r\n    UNFOLLOW_USER,\r\n    UPDATE_BIO,\r\n    UPLOAD_PICTURE,\r\n  } from \"../actions/user.actions\";\r\n  \r\n  const initialState = {}; //Quand on va demander de la data, on va voir en premier lieu la db, puis on va la sotcker -> plus besoin à la db\r\n  \r\n  export default function userReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case GET_USER:\r\n        return action.payload; //Toute la data de res.data qui à été envoyé avec action.payload on incrémente notre initialState\r\n      case UPLOAD_PICTURE:\r\n        return {\r\n          ...state, //pour eviter d'écraser les données\r\n          picture: action.payload,\r\n        };\r\n      case UPDATE_BIO:\r\n        return {\r\n          ...state,\r\n          bio: action.payload,\r\n        };\r\n      case FOLLOW_USER:\r\n        return {\r\n          ...state,\r\n          following: [action.payload.idToFollow, ...state.following], //on recupère la suite de notre tableau pour pas écraser ce qu'on avait avant\r\n        };\r\n      case UNFOLLOW_USER:\r\n        return {\r\n          ...state,\r\n          following: state.following.filter((id) => id !== action.payload.idToUnfollow),\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}