{"ast":null,"code":"var _jsxFileName = \"/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Page/Post/CardComment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addComment, getPosts } from '../../Utilitaire/actions/post.actions';\nimport Follow from '../Profil/Follow';\nimport { isEmpty, timestampParser } from '../../Utilitaire/Util';\nimport EditDeleteComment from './EditDeleteComment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardComment = ({\n  post\n}) => {\n  _s();\n\n  const [text, setText] = useState(\"\"); //le texte de notre commentaire\n\n  const usersData = useSelector(state => state.usersReducer);\n  const userData = useSelector(state => state.userReducer);\n  const dispatch = useDispatch(); //permet d'envoyer l'action\n\n  const handleComment = e => {\n    e.preventDefault(); //éviter de changer de page quand on clique sur confirmer\n\n    if (text) {\n      dispatch(addComment(post._id, userData._id, text, userData.pseudo)).then(() => dispatch(getPosts())) //on récupère tout les postes de mongoDb -> le store va se mettre a jour avec l'id unique du poste,\n      .then(() => setText('')); // on remet le texte du commentaire a vide si on veut en refaire un plus tard\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-container\",\n    children: [post.comments.map(comment => {\n      /*On montre tout les commentaires qui sont dans la liste du post */\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-container\"\n        /* Quand on commente un post notre commentaire va être d'une autre couleur*/\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-part\",\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src:\n            /* on récupère l'image de facon dynamique comme pour les post*/\n            !isEmpty(usersData[0]) && usersData.map(user => {\n              if (user._id === comment.commenterId) return user.picture;\n              return null;\n            }).join(\"\"),\n            alt: \"commenter-pic\",\n            width: \"30px\",\n            height: \"30px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-part\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pseudo\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: comment.commenterPseudo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 10\n              }, this), \" \", comment.commenterId !== userData._id &&\n              /*#__PURE__*/\n\n              /*pour pouvoir follow la personne qui a commenté (on ne peut pas ce suivre soit-même) */\n              _jsxDEV(Follow, {\n                idToFollow: comment.commenterId,\n                type: \"card\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: timestampParser(comment.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" \", comment.text, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(EditDeleteComment, {\n            comment: comment,\n            postId: post._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }, this)]\n      }, comment._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 6\n      }, this);\n    }), userData._id &&\n    /*#__PURE__*/\n\n    /* si jamais on est connecté alors on peut rajouter un commentaire*/\n    _jsxDEV(\"form\", {\n      action: \"\",\n      onSubmit: handleComment,\n      className: \"comment-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"text\",\n        type: \"text\",\n        name: \"text\",\n        onChange: e => setText(e.target.value),\n        value: text,\n        placeholder: \"Commentaire\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"commenter\",\n        type: \"submit\",\n        value: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CardComment, \"ZHyW6oEmvqsEpl2vcMvFa+6fKc4=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = CardComment;\nexport default CardComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardComment\");","map":{"version":3,"sources":["/Users/ihsaneboubrik/Desktop/L3/S6-2022/LU3IN017/ProjetWeb/cheeky/Client/src/component/Page/Post/CardComment.js"],"names":["React","useState","useDispatch","useSelector","addComment","getPosts","Follow","isEmpty","timestampParser","EditDeleteComment","CardComment","post","text","setText","usersData","state","usersReducer","userData","userReducer","dispatch","handleComment","e","preventDefault","_id","pseudo","then","comments","map","comment","user","commenterId","picture","join","commenterPseudo","timestamp","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,uCAArC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,uBAAzC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;;AAEA,MAAMC,WAAW,GAAG,CAAE;AAAEC,EAAAA;AAAF,CAAF,KAAgB;AAAA;;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC,CADmC,CACG;;AACtC,QAAMa,SAAS,GAAGX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,YAAlB,CAA7B;AACA,QAAMC,QAAQ,GAAGd,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACG,WAAlB,CAA5B;AACA,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B,CAJmC,CAIH;;AAEhC,QAAMkB,aAAa,GAAIC,CAAD,IAAO;AAC5BA,IAAAA,CAAC,CAACC,cAAF,GAD4B,CACR;;AAEpB,QAAGV,IAAH,EAAQ;AACPO,MAAAA,QAAQ,CAACf,UAAU,CAACO,IAAI,CAACY,GAAN,EAAWN,QAAQ,CAACM,GAApB,EAAyBX,IAAzB,EAA+BK,QAAQ,CAACO,MAAxC,CAAX,CAAR,CACCC,IADD,CACM,MAAMN,QAAQ,CAACd,QAAQ,EAAT,CADpB,EACkC;AADlC,OAECoB,IAFD,CAEM,MAAMZ,OAAO,CAAC,EAAD,CAFnB,EADO,CAGmB;AAC1B;AACD,GARD;;AAUA,sBACC;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,eACEF,IAAI,CAACe,QAAL,CAAcC,GAAd,CAAmBC,OAAD,IAAa;AAAE;AACjC,0BACC;AAAK,QAAA,SAAS,EAAE;AAAoB;AAApC;AAAA,gCACC;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACC;AAAA;AAAA;AAAA;AAAA,kBADD,eAEC;AACC,YAAA,GAAG;AAAG;AACL,aAACrB,OAAO,CAACO,SAAS,CAAC,CAAD,CAAV,CAAR,IAA0BA,SAAS,CAACa,GAAV,CAAeE,IAAD,IAAU;AACjD,kBAAIA,IAAI,CAACN,GAAL,KAAaK,OAAO,CAACE,WAAzB,EACC,OAAOD,IAAI,CAACE,OAAZ;AACD,qBAAO,IAAP;AACA,aAJyB,EAIvBC,IAJuB,CAIlB,EAJkB,CAF5B;AAQC,YAAA,GAAG,EAAC,eARL;AASC,YAAA,KAAK,EAAC,MATP;AAUC,YAAA,MAAM,EAAC;AAVR;AAAA;AAAA;AAAA;AAAA,kBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAgBC;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACC;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA,oCACC;AAAK,cAAA,SAAS,EAAC,QAAf;AAAA,sCACC;AAAA,0BAAKJ,OAAO,CAACK;AAAb;AAAA;AAAA;AAAA;AAAA,sBADD,OAEEL,OAAO,CAACE,WAAR,KAAwBb,QAAQ,CAACM,GAAjC;AAAA;;AAA0C;AAC1C,sBAAC,MAAD;AACC,gBAAA,UAAU,EAAEK,OAAO,CAACE,WADrB;AAEC,gBAAA,IAAI,EAAE;AAFP;AAAA;AAAA;AAAA;AAAA,sBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAUC;AAAA,wBAAOtB,eAAe,CAACoB,OAAO,CAACM,SAAT;AAAtB;AAAA;AAAA;AAAA;AAAA,oBAVD;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAaC;AAAA,4BAAKN,OAAO,CAAChB,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbD,eAcC,QAAC,iBAAD;AAAmB,YAAA,OAAO,EAAEgB,OAA5B;AAAqC,YAAA,MAAM,EAAEjB,IAAI,CAACY;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAdD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBD;AAAA,SAAuHK,OAAO,CAACL,GAA/H;AAAA;AAAA;AAAA;AAAA,cADD;AAmCA,KApCA,CADF,EAsCEN,QAAQ,CAACM,GAAT;AAAA;;AAAkB;AAClB;AAAM,MAAA,MAAM,EAAC,EAAb;AAAgB,MAAA,QAAQ,EAAEH,aAA1B;AAAyC,MAAA,SAAS,EAAC,cAAnD;AAAA,8BACC;AAAO,QAAA,SAAS,EAAC,MAAjB;AAAwB,QAAA,IAAI,EAAC,MAA7B;AAAoC,QAAA,IAAI,EAAC,MAAzC;AAAgD,QAAA,QAAQ,EAAGC,CAAD,IAAOR,OAAO,CAACQ,CAAC,CAACc,MAAF,CAASC,KAAV,CAAxE;AAA0F,QAAA,KAAK,EAAExB,IAAjG;AAAuG,QAAA,WAAW,EAAC;AAAnH;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAO,QAAA,SAAS,EAAC,WAAjB;AAA6B,QAAA,IAAI,EAAC,QAAlC;AAA2C,QAAA,KAAK,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA,YAvCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAgDA,CAhED;;GAAMF,W;UAEaP,W,EACDA,W,EACAD,W;;;KAJZQ,W;AAkEN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addComment, getPosts } from '../../Utilitaire/actions/post.actions';\r\nimport Follow from '../Profil/Follow';\r\nimport { isEmpty, timestampParser } from '../../Utilitaire/Util';\r\nimport EditDeleteComment from './EditDeleteComment';\r\n\r\nconst CardComment = ( { post } ) => {\r\n\tconst [text, setText] = useState(\"\"); //le texte de notre commentaire\r\n\tconst usersData = useSelector((state) => state.usersReducer);\r\n\tconst userData = useSelector((state) => state.userReducer);\r\n\tconst dispatch = useDispatch(); //permet d'envoyer l'action\r\n\r\n\tconst handleComment = (e) => {\r\n\t\te.preventDefault(); //éviter de changer de page quand on clique sur confirmer\r\n\t\t\r\n\t\tif(text){\r\n\t\t\tdispatch(addComment(post._id, userData._id, text, userData.pseudo))\r\n\t\t\t.then(() => dispatch(getPosts())) //on récupère tout les postes de mongoDb -> le store va se mettre a jour avec l'id unique du poste,\r\n\t\t\t.then(() => setText('')); // on remet le texte du commentaire a vide si on veut en refaire un plus tard\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"comments-container\">\r\n\t\t\t{post.comments.map((comment) => { /*On montre tout les commentaires qui sont dans la liste du post */\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className={\"comment-container\" /* Quand on commente un post notre commentaire va être d'une autre couleur*/} key={comment._id}>\r\n\t\t\t\t\t\t<div className=\"left-part\">\r\n\t\t\t\t\t\t\t<br></br>\r\n\t\t\t\t\t\t\t<img \r\n\t\t\t\t\t\t\t\tsrc={ /* on récupère l'image de facon dynamique comme pour les post*/\r\n\t\t\t\t\t\t\t\t\t!isEmpty(usersData[0]) && usersData.map((user) => {\r\n\t\t\t\t\t\t\t\t\t\tif (user._id === comment.commenterId) \r\n\t\t\t\t\t\t\t\t\t\t\treturn user.picture;\r\n\t\t\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t\t\t}).join(\"\") \r\n\t\t\t\t\t\t\t\t}    \r\n\t\t\t\t\t\t\t\talt=\"commenter-pic\"\r\n\t\t\t\t\t\t\t\twidth=\"30px\" \r\n\t\t\t\t\t\t\t\theight=\"30px\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"right-part\">\r\n\t\t\t\t\t\t\t<div className=\"comment-header\">\r\n\t\t\t\t\t\t\t\t<div className=\"pseudo\">\r\n\t\t\t\t\t\t\t\t\t<h3>{comment.commenterPseudo}</h3> {/* On récupère le commentaire de manière non dynamique car on peut pas changer de pseudo  */}\r\n\t\t\t\t\t\t\t\t\t{comment.commenterId !== userData._id && ( /*pour pouvoir follow la personne qui a commenté (on ne peut pas ce suivre soit-même) */\r\n\t\t\t\t\t\t\t\t\t\t<Follow\r\n\t\t\t\t\t\t\t\t\t\t\tidToFollow={comment.commenterId} \r\n\t\t\t\t\t\t\t\t\t\t\ttype={\"card\"} \r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<span>{timestampParser(comment.timestamp)}</span> \r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<p> {comment.text} </p>\r\n\t\t\t\t\t\t\t<EditDeleteComment comment={comment} postId={post._id} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t\t{userData._id && ( /* si jamais on est connecté alors on peut rajouter un commentaire*/\r\n\t\t\t\t<form action=\"\" onSubmit={handleComment} className=\"comment-form\">\r\n\t\t\t\t\t<input className='text' type=\"text\" name=\"text\" onChange={(e) => setText(e.target.value)} value={text} placeholder=\"Commentaire\"/>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<input className='commenter' type=\"submit\" value=\"Envoyer\" /> \r\n\t\t\t\t</form>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardComment;"]},"metadata":{},"sourceType":"module"}